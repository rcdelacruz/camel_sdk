/**
 * camel-sdk
 * This is a Camel passthru API to Unimart App server.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: rdelacruz@stratpoint.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function (root, factory) {
  if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ErrorResponse'), require('../model/SuccessResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.CamelSdk) {
      root.CamelSdk = {};
    }
    root.CamelSdk.DefaultApi = factory(root.CamelSdk.ApiClient, root.CamelSdk.ErrorResponse, root.CamelSdk.SuccessResponse);
  }
}(this, function (ApiClient, ErrorResponse, SuccessResponse) {
  'use strict';

  /**
   * Default service.
   * @module api/DefaultApi
   * @version 1.0.0
   */

  /**
   * Constructs a new DefaultApi. 
   * @alias module:api/DefaultApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function (apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the apiDelete operation.
     * @callback module:api/DefaultApi~apiDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an item
     * @param {String} xUnimartApiUrl Function name
     * @param {Object} opts Optional parameters
     * @param {String} opts.body 
     * @param {module:api/DefaultApi~apiDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessResponse}
     */
    this.apiDelete = function(xUnimartApiUrl, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'xUnimartApiUrl' is set
      if (xUnimartApiUrl === undefined || xUnimartApiUrl === null) {
        throw new Error("Missing the required parameter 'xUnimartApiUrl' when calling apiDelete");
      }


      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'x-unimart-api-url': xUnimartApiUrl
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SuccessResponse;

      return this.apiClient.callApi(
        '/api', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiGet operation.
     * @callback module:api/DefaultApi~apiGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get items
     * Multiple status values can be provided with comma separated strings
     * @param {String} xUnimartApiUrl Function name
     * @param {module:api/DefaultApi~apiGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessResponse}
     */
    this.apiGet = function (xUnimartApiUrl, callback) {
      var postBody = null;

      // verify the required parameter 'xUnimartApiUrl' is set
      if (xUnimartApiUrl === undefined || xUnimartApiUrl === null) {
        throw new Error("Missing the required parameter 'xUnimartApiUrl' when calling apiGet");
      }


      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'x-unimart-api-url': xUnimartApiUrl
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SuccessResponse;

      return this.apiClient.callApi(
        '/api', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiPost operation.
     * @callback module:api/DefaultApi~apiPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a new item* 
     * @param {String} xUnimartApiUrl Function name
     * @param {Object} opts Optional parameters
     * @param {String} opts.body 
     * @param {module:api/DefaultApi~apiPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessResponse}
     */
    this.apiPost = function(xUnimartApiUrl, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      // verify the required parameter 'xUnimartApiUrl' is set
      if (xUnimartApiUrl === undefined || xUnimartApiUrl === null) {
        throw new Error("Missing the required parameter 'xUnimartApiUrl' when calling apiPost");
      }


      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'x-unimart-api-url': xUnimartApiUrl
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SuccessResponse;

      return this.apiClient.callApi(
        '/api', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiPut operation.
     * @callback module:api/DefaultApi~apiPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an existing pet
     * @param {String} xUnimartApiUrl Function name
     * @param {Object} opts Optional parameters
     * @param {String} opts.body 
     * @param {module:api/DefaultApi~apiPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessResponse}
     */
    this.apiPut = function(xUnimartApiUrl, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'xUnimartApiUrl' is set
      if (xUnimartApiUrl === undefined || xUnimartApiUrl === null) {
        throw new Error("Missing the required parameter 'xUnimartApiUrl' when calling apiPut");
      }


      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'x-unimart-api-url': xUnimartApiUrl
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SuccessResponse;

      return this.apiClient.callApi(
        '/api', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));